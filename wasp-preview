#!/usr/bin/env python3.4
#
# This file is part of wasp-previewd.
#
# wasp-previewd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# wasp-previewd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with wasp-previewd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline process for notifying new exposures to the SuperWASP preview daemon"""

# pylint: disable=invalid-name

import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except Pyro4.errors.CommunicationError:
        ret = -101

    sys.exit(ret)


def notify_exposure(args):
    """Notify that a new exposure is available to process"""
    if len(args) < 2:
        print('usage: {} notify <exposure_number> <exposure_delay> <object_name>'.format(SCRIPT_NAME))
        return -1

    exposure_number = int(args[0])
    exposure_delay = float(args[1])
    object_name = args[2]
    with daemons.superwasp_preview.connect() as preview:
        preview.notify_exposure(exposure_number, exposure_delay, object_name)

    return 0


def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   notify       notify that a new exposure is available to process')
    print()
    return 0


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage())

    if sys.argv[1] == 'notify':
        run_command(lambda: notify_exposure(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage())
