#!/usr/bin/env python3.6
#
# This file is part of wasp-previewd.
#
# wasp-previewd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# wasp-previewd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with wasp-previewd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for generating live data previews for the SuperWASP LEO trails"""

# pylint: disable=invalid-name
# pylint: disable=too-many-locals
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-few-public-methods
# pylint: disable=broad-except

import datetime
import glob
import json
import os
import queue
import sys
import tempfile
import threading
import time
import traceback
from astropy.io import fits
import numpy as np
from PIL import Image, ImageOps
import Pyro4
from warwick.observatory.common import (
    daemons,
    IP)

from warwick.observatory.common.helpers import pyro_client_matches

NOTIFY_FRAME_IPS = [IP.GOTOServer]

FRAME_FORMAT = 'DAS{0}_*{1:09d}.*'
SCP_FORMAT = 'scp wasp@192.168.0.49:/data/das{0}/*/' + FRAME_FORMAT + ' {2} > /dev/null'
OUTPUT_DIR = '/srv/dashboard/generated/'
CALIBS_DIR = '/etc/wasp-previewd/'

# DAS: [dx, dy, rot180]
FRAME_OFFSETS = {
    2: [165, 27, False],
    4: [44, 1853, False],
    5: [1049, 2626, False],
    6: [1864, 285, False],
    7: [2006, 1769, True]
}

def rescale_image_data(data, clip_low, clip_high):
    """ Returns a normalised array where clip_low percent of the pixels are 0 and
        clip_high percent of the pixels are 255
    """
    high = np.nanpercentile(data, clip_high)
    low = np.nanpercentile(data, clip_low)
    scale = 255. / (high - low)
    data = np.clip(data, low, high)
    return scale * (data - low)

class WaspPreviewDaemon:
    """Daemon interface for data pipeline"""
    def __init__(self):
        self._command_lock = threading.Lock()
        self._process_queue = queue.Queue()

        preview_thread = threading.Thread(target=self.__process_previews)
        preview_thread.daemon = True
        preview_thread.start()

        self._bias = {}
        self._flat = {}

        for das in FRAME_OFFSETS:
            with fits.open(os.path.join(CALIBS_DIR, 'DAS{0}_Bias.fits.gz'.format(das))) as frame:
                self._bias[das] = np.transpose(frame[0].data[0:2048, 5:2048])

            with fits.open(os.path.join(CALIBS_DIR, 'DAS{0}_Flat.fits.gz'.format(das))) as frame:
                self._flat[das] = np.transpose(frame[0].data[0:2048, 5:2048])

        # Min and max percentage thresholds to use for the preview pngs
        self._dashboard_min_threshold = 5
        self._dashboard_max_threshold = 95

    def __build_preview(self, exposure_number, object_name):
        with tempfile.TemporaryDirectory() as temp_dir:
            metadata = {}
            footprint = np.empty((4696, 4096))
            footprint.fill(np.nan)

            for das, (dx, dy, rot180) in FRAME_OFFSETS.items():
                command = SCP_FORMAT.format(das, exposure_number, temp_dir)
                os.system(command)

                file = glob.glob(os.path.join(temp_dir, FRAME_FORMAT.format(das, exposure_number)))
                if file:
                    with fits.open(file[0]) as frame:
                        data = np.transpose(frame[0].data[0:2048, 5:2048].astype(np.float32))
                        data -= self._bias[das]
                        data /= self._flat[das]

                        if rot180:
                            data = np.rot90(data, 2)

                        footprint[dy + 5:dy+2048, dx:dx+2048] = rescale_image_data(
                            data,
                            self._dashboard_min_threshold,
                            self._dashboard_max_threshold)

                    if not metadata:
                        metadata = {
                            'object': object_name,
                            'exposure_number': exposure_number,
                            'date': frame[0].header['DATE-OBS'] + 'T' + \
                                    frame[0].header['UTSTART'],
                            'exptime': frame[0].header['EXPTIME'],
                            'clipsize': 1024,
                            'size': [4096, 4696]
                        }

            png = Image.fromarray(footprint).convert('RGB')
            png = ImageOps.flip(png)

            png.thumbnail((1024, 1174))
            png.save(os.path.join(OUTPUT_DIR, 'dashboard-wasp-thumb.jpg'), 'JPEG',
                     quality=80, optimize=True, progressive=True, clobber=True)

            png = Image.fromarray(footprint[1836:2860, 1536:2560]).convert('RGB')
            png = ImageOps.flip(png)
            png.save(os.path.join(OUTPUT_DIR, 'dashboard-wasp-clip.jpg'), 'JPEG',
                     quality=80, optimize=True, progressive=True, clobber=True)

            with open(os.path.join(OUTPUT_DIR, 'dashboard-wasp.json'), 'w') as outfile:
                json.dump(metadata, outfile)

    def __process_previews(self):
        while True:
            # Blocks until a frame is available for processing
            exposure_number, exposure_delay, object_name = self._process_queue.get()

            # Wait for frame to be available
            time.sleep(exposure_delay)

            start = datetime.datetime.utcnow()

            try:
                self.__build_preview(exposure_number, object_name)
            except Exception:
                print('Unexpected exception while processing ' + str(exposure_number) + ':')
                traceback.print_exc(file=sys.stdout)
                self._process_queue.task_done()

            process_time = round((datetime.datetime.utcnow() - start).total_seconds(), 1)
            print('processed ' + str(exposure_number) + ' in ' + str(round(process_time, 2)) + 's')

    @Pyro4.expose
    def notify_exposure(self, exposure_number, exposure_delay, object_name):
        """Called by the camera daemons to notify that a new frame has been saved to disk"""
        if not pyro_client_matches(NOTIFY_FRAME_IPS):
            return 1

        self._process_queue.put((exposure_number, exposure_delay, object_name))

        return 0

if __name__ == '__main__':
    daemons.superwasp_preview.launch(WaspPreviewDaemon())
